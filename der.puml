@startuml
title Plataforma de Archivos On-Premise - Sprint 1 (Versi칩n Final con Cardinalidades)

' ======================
' USUARIOS Y ROLES
' ======================
package "Usuarios" {
  class Usuario {
    -id: int
    -nombre: string
    -email: string
    -passwordHash: string
    +getId(): int
    +getEmail(): string
    +validarPassword(password: string): boolean
  }

  class Administrador extends Usuario {
    +definirPoliticaVersionado(limite: int): void
    +verRegistrosAcceso(): List<String>
    +recibirAlertasSeguridad(): void
  }

  class Rol {
    -id: int
    -nombre: string
    -permisos: List<Permiso>
    +getPermisos(): List<Permiso>
  }

  class Permiso {
    -id: int
    -nombre: string
    -descripcion: string
  }
}

' ======================
' AUTENTICACION
' ======================
package "Autenticaci칩n" {
  class AuthService {
    +login(email: string, password: string): Usuario
    +logout(usuario: Usuario): void
    +generarToken(usuario: Usuario): string
    +verificarToken(token: string): boolean
    +refrescarSesion(usuario: Usuario): string
  }
}

' ======================
' ARCHIVOS
' ======================
package "Archivos" {
  class Archivo {
    -id: int
    -nombre: string
    -tama침o: float
    -tipo: string
    -fechaCreacion: Date
    -fechaModificacion: Date
    -versiones: List<Version>
    +renombrar(nuevoNombre: string): void
    +eliminar(): void
    +getVersiones(): List<Version>
    +getEtiquetas(): List<Etiqueta>
    +previsualizar(): Object
    +descargar(): binary
  }

  class Version {
    -id: int
    -numero: int
    -contenido: binary
    -fecha: Date
    -autor: Usuario
  }

  class GestorArchivos <<Facade>> {
    +subirArchivo(archivo: Archivo, usuario: Usuario): void
    +eliminarArchivo(archivo: Archivo): void
    +renombrarArchivo(archivo: Archivo, nuevoNombre: string): void
    +restaurarVersion(archivo: Archivo, version: Version): void
    +obtenerArchivo(id: int): Archivo
    +listarArchivos(carpeta: Carpeta): List<Archivo>
    +previsualizarArchivo(archivo: Archivo): Object
    +descargarArchivo(archivo: Archivo): binary
  }

  class VersionFactory <<Factory>> {
    +crearVersion(archivo: Archivo, usuario: Usuario): Version
  }
}

' ======================
' CARPETAS
' ======================
package "Carpetas" {
  class Carpeta {
    -id: int
    -nombre: string
    -archivos: List<Archivo>
    -subcarpetas: List<Carpeta>
    +crearSubcarpeta(nombre: string): Carpeta
    +renombrar(nuevoNombre: string): void
    +eliminar(): void
    +listarContenido(): List<Object>
  }

  class GestorCarpetas <<Facade>> {
    +crearCarpeta(nombre: string, usuario: Usuario): Carpeta
    +eliminarCarpeta(carpeta: Carpeta): void
    +renombrarCarpeta(carpeta: Carpeta, nuevoNombre: string): void
    +moverArchivo(archivo: Archivo, carpetaDestino: Carpeta): void
    +listarCarpetas(usuario: Usuario): List<Carpeta>
  }
}

' ======================
' ORGANIZACION Y ORDENAMIENTO
' ======================
package "Organizaci칩n" {
  class Etiqueta {
    -id: int
    -nombre: string
    +asignarArchivo(archivo: Archivo): void
    +removerArchivo(archivo: Archivo): void
  }

  interface EstrategiaOrdenamiento <<Strategy>> {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenarPorFecha implements EstrategiaOrdenamiento {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenarPorNombre implements EstrategiaOrdenamiento {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenarPorTipo implements EstrategiaOrdenamiento {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenadorArchivos {
    -estrategia: EstrategiaOrdenamiento
    +setEstrategia(estrategia: EstrategiaOrdenamiento): void
    +ordenarArchivos(archivos: List<Archivo>): List<Archivo>
  }
}

' ======================
' VERSIONAMIENTO
' ======================
package "Versionamiento" {
  interface PoliticaVersionado <<Strategy>> {
    +aplicar(versiones: List<Version>): List<Version>
  }

  class PoliticaLimiteFijo implements PoliticaVersionado {
    -limite: int
    +aplicar(versiones: List<Version>): List<Version>
  }
}

' ======================
' PERMISOS
' ======================
package "Permisos" {
  class CompartirService {
    +compartirArchivo(archivo: Archivo, rol: Rol): void
    +revocarAcceso(archivo: Archivo, rol: Rol): void
    +listarUsuariosConAcceso(archivo: Archivo): List<Usuario>
    +compartirCarpeta(carpeta: Carpeta, usuario: Usuario): void
    +revocarAccesoCarpeta(carpeta: Carpeta, usuario: Usuario): void
    +listarUsuariosConAccesoCarpeta(carpeta: Carpeta): List<Usuario>
  }
}

' ======================
' PERSISTENCIA
' ======================
package "Persistencia" {
  interface IRepositorioArchivos {
    +guardar(archivo: Archivo): void
    +obtener(id: int): Archivo
    +eliminar(id: int): void
    +listarPorCarpeta(carpeta: Carpeta): List<Archivo>
  }

  interface IRepositorioUsuarios {
    +guardar(usuario: Usuario): void
    +obtener(id: int): Usuario
    +obtenerPorEmail(email: string): Usuario
  }

  class LocalStorageRepositorio implements IRepositorioArchivos {
    +guardar(archivo: Archivo): void
    +obtener(id: int): Archivo
    +eliminar(id: int): void
    +listarPorCarpeta(carpeta: Carpeta): List<Archivo>
  }
}

' ======================
' RELACIONES CON CARDINALIDAD
' ======================
Usuario "1" -- "1..*" Carpeta
Usuario "1" -- "0..*" Etiqueta
Usuario "1" --> "1" Rol
Rol "1" --> "0..*" Permiso

Carpeta "1" -- "0..*" Archivo
Carpeta "0..1" -- "0..*" Carpeta : subcarpetas

Archivo "1" -- "1..*" Version
Archivo "0..*" -- "0..*" Etiqueta

Etiqueta "1" --> "1" Usuario : creada_por

Administrador "1" --> "1" PoliticaVersionado
GestorArchivos --> VersionFactory
GestorArchivos --> PoliticaVersionado
GestorArchivos --> IRepositorioArchivos
GestorCarpetas --> Carpeta
OrdenadorArchivos --> EstrategiaOrdenamiento
OrdenadorArchivos --> Archivo
CompartirService --> Archivo
CompartirService --> Rol
CompartirService --> Carpeta
CompartirService --> Usuario : acceso_carpeta
AuthService --> IRepositorioUsuarios
@enduml