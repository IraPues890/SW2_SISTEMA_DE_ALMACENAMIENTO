@startuml diagrama_componentes_ulstorage

!define COMPONENT component
!define INTERFACE interface
!define DATABASE database

title **🏗️ DIAGRAMA DE COMPONENTES - SISTEMA ULSTORAGE**\n//Arquitectura del Sistema de Almacenamiento en la Nube//

skinparam componentStyle rectangle
skinparam component {
    BackgroundColor #E8F4FD
    BorderColor #2E86AB
    ArrowColor #A23B72
}

skinparam interface {
    BackgroundColor #FFF3CD
    BorderColor #856404
}

skinparam database {
    BackgroundColor #D1ECF1
    BorderColor #0C5460
}

' ===============================
' CAPA DE PRESENTACIÓN (FRONTEND)
' ===============================
package "🖥️ FRONTEND - REACT" as frontend {
    COMPONENT [🔐 Login Component] as login_ui
    COMPONENT [📊 Dashboard Component] as dashboard_ui
    COMPONENT [📁 File Manager Component] as filemanager_ui
    COMPONENT [📋 File Upload Component] as upload_ui
    COMPONENT [🏷️ Tag Manager Component] as tag_ui
    COMPONENT [👥 Share Manager Component] as share_ui
    
    INTERFACE "Auth API" as auth_api
    INTERFACE "Files API" as files_api
    INTERFACE "Folders API" as folders_api
    INTERFACE "Tags API" as tags_api
    INTERFACE "Share API" as share_api
}

' ===============================
' CAPA DE SERVICIOS (BACKEND API)
' ===============================
package "🔧 BACKEND - NODE.JS/EXPRESS" as backend {
    
    ' Controladores
    package "🎮 CONTROLLERS" as controllers {
        COMPONENT [🔐 AuthController] as auth_controller
        COMPONENT [📄 FileController] as file_controller
        COMPONENT [📁 FolderController] as folder_controller
        COMPONENT [🏷️ TagController] as tag_controller
        COMPONENT [👥 ShareController] as share_controller
        COMPONENT [📊 LogController] as log_controller
    }
    
    ' Servicios de Negocio
    package "💼 SERVICES" as services {
        COMPONENT [🔐 AuthService] as auth_service
        COMPONENT [📄 GestorArchivos] as file_manager
        COMPONENT [📁 GestorCarpetas] as folder_manager
        COMPONENT [🏷️ EtiquetaService] as tag_service
        COMPONENT [👥 CompartirService] as share_service
        COMPONENT [📊 ActivityLogService] as log_service
        COMPONENT [🔄 VersionFactory] as version_factory
    }
    
    ' Middleware
    package "🛡️ MIDDLEWARE" as middleware {
        COMPONENT [🔐 JWT Auth Middleware] as jwt_middleware
        COMPONENT [✅ Validation Middleware] as validation_middleware
        COMPONENT [📝 Logger Middleware] as logger_middleware
        COMPONENT [🚫 CORS Middleware] as cors_middleware
    }
}

' ===============================
' CAPA DE DATOS (REPOSITORIES)
' ===============================
package "🗄️ DATA ACCESS LAYER" as data_layer {
    
    package "📚 REPOSITORIES" as repositories {
        COMPONENT [👤 UserRepository] as user_repo
        COMPONENT [📄 FileRepository] as file_repo
        COMPONENT [📁 FolderRepository] as folder_repo
        COMPONENT [🏷️ TagRepository] as tag_repo
        COMPONENT [👥 ShareRepository] as share_repo
        COMPONENT [📊 LogRepository] as log_repo
    }
    
    package "🔄 ORM - SEQUELIZE" as orm {
        COMPONENT [👤 User Model] as user_model
        COMPONENT [📄 File Model] as file_model
        COMPONENT [📁 Folder Model] as folder_model
        COMPONENT [🏷️ Tag Model] as tag_model
        COMPONENT [👥 Permission Model] as permission_model
        COMPONENT [📋 Version Model] as version_model
        COMPONENT [📊 ActivityLog Model] as log_model
    }
}

' ===============================
' CAPA DE ALMACENAMIENTO EN LA NUBE
' ===============================
package "☁️ CLOUD STORAGE PROVIDERS" as cloud_storage {
    
    package "🔄 STRATEGY PATTERN" as storage_strategy {
        INTERFACE "IProveedorAlmacenamiento" as storage_interface
        COMPONENT [🅾️ OCI Storage] as oci_storage
        COMPONENT [🔶 AWS S3 Storage] as aws_storage
        COMPONENT [🔵 GCP Storage] as gcp_storage
        COMPONENT [🏭 ProveedorFactory] as provider_factory
    }
    
    package "📡 EXTERNAL APIS" as external_apis {
        DATABASE "☁️ Oracle Cloud\nInfrastructure" as oci_api
        DATABASE "☁️ Amazon Web\nServices S3" as aws_api
        DATABASE "☁️ Google Cloud\nPlatform" as gcp_api
    }
}

' ===============================
' BASE DE DATOS
' ===============================
package "🗃️ DATABASE TIER" as database_tier {
    DATABASE "🐘 PostgreSQL\nDatabase" as postgres_db {
        [👤 users]
        [📁 carpetas]
        [📄 archivos]
        [📋 versiones]
        [🏷️ etiquetas]
        [🔗 archivo_etiquetas]
        [🔐 permisos]
        [📊 activity_logs]
    }
}

' ===============================
' SISTEMAS EXTERNOS
' ===============================
package "🌐 EXTERNAL SYSTEMS" as external_systems {
    COMPONENT [📧 Email Service] as email_service
    COMPONENT [🔔 Notification Service] as notification_service
    COMPONENT [📊 Analytics Service] as analytics_service
}

' ===============================
' RELACIONES ENTRE COMPONENTES
' ===============================

' Frontend → Backend APIs
login_ui --> auth_api
dashboard_ui --> files_api
filemanager_ui --> files_api
filemanager_ui --> folders_api
upload_ui --> files_api
tag_ui --> tags_api
share_ui --> share_api

' APIs → Controllers
auth_api --> auth_controller
files_api --> file_controller
folders_api --> folder_controller
tags_api --> tag_controller
share_api --> share_controller

' Controllers → Middleware
auth_controller --> jwt_middleware
file_controller --> jwt_middleware
folder_controller --> jwt_middleware
tag_controller --> jwt_middleware
share_controller --> jwt_middleware

auth_controller --> validation_middleware
file_controller --> validation_middleware
folder_controller --> validation_middleware

' Controllers → Services
auth_controller --> auth_service
file_controller --> file_manager
folder_controller --> folder_manager
tag_controller --> tag_service
share_controller --> share_service
file_controller --> log_service

' Services → Repositories
auth_service --> user_repo
file_manager --> file_repo
folder_manager --> folder_repo
tag_service --> tag_repo
share_service --> share_repo
log_service --> log_repo

' Services → Storage Strategy
file_manager --> provider_factory
file_manager --> storage_interface

' Storage Strategy → Cloud Providers
storage_interface <|.. oci_storage
storage_interface <|.. aws_storage
storage_interface <|.. gcp_storage
provider_factory --> oci_storage
provider_factory --> aws_storage
provider_factory --> gcp_storage

' Cloud Providers → External APIs
oci_storage --> oci_api
aws_storage --> aws_api
gcp_storage --> gcp_api

' Repositories → ORM Models
user_repo --> user_model
file_repo --> file_model
folder_repo --> folder_model
tag_repo --> tag_model
share_repo --> permission_model
log_repo --> log_model

' ORM → Database
user_model --> postgres_db
file_model --> postgres_db
folder_model --> postgres_db
tag_model --> postgres_db
permission_model --> postgres_db
version_model --> postgres_db
log_model --> postgres_db

' Services → External Systems
auth_service --> email_service
share_service --> notification_service
log_service --> analytics_service

' Special Relations
file_manager --> version_factory
version_factory --> version_model

' ===============================
' NOTAS ARQUITECTÓNICAS
' ===============================
note top of frontend : **FRONTEND SPA**\nReact + Vite + Tailwind CSS\nComponentes modulares con hooks
note top of controllers : **API REST**\nControladores que manejan\nHTTP requests/responses
note top of services : **LÓGICA DE NEGOCIO**\nImplementa patrones Strategy,\nFactory y Facade del UML
note top of storage_strategy : **PATRÓN STRATEGY**\nAbstracción para múltiples\nproveedores de nube
note top of postgres_db : **BASE DE DATOS**\nPostgreSQL con Sequelize ORM\nEstructura del diagrama ER

' ===============================
' LEYENDA DE COMPONENTES
' ===============================
legend bottom left
|= Símbolo |= Significado |
|🔐| Autenticación y Seguridad |
|📄| Gestión de Archivos |
|📁| Gestión de Carpetas |
|🏷️| Sistema de Etiquetas |
|👥| Compartir y Permisos |
|📊| Logs y Auditoría |
|☁️| Almacenamiento en la Nube |
|🔄| Patrones de Diseño |

**🏗️ Arquitectura:**
• **N-Capas**: Presentación → API → Servicios → Datos
• **Patrones**: Strategy, Factory, Facade, Repository
• **Tecnologías**: React, Node.js, Express, Sequelize, PostgreSQL
• **Cloud**: OCI, AWS, GCP con abstracción de proveedores
endlegend

@enduml