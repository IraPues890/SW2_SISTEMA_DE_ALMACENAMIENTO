@startuml der_cloud
title Plataforma de Archivos con Almacenamiento en la Nube - Sprint 1 (Versión Adaptada)

!define RECTANGLE class

' ======================
' LAYOUT CONFIGURATION
' ======================
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam class {
  BackgroundColor PaleGreen
  ArrowColor SeaGreen
  BorderColor SpringGreen
}

' ======================
' TOP ROW: USUARIOS Y AUTENTICACION
' ======================
package "Usuarios" {
  class Usuario {
    -id: int
    -nombre: string
    -email: string
    -passwordHash: string
    +getId(): int
    +getEmail(): string
    +validarPassword(password: string): boolean
  }

  class Administrador extends Usuario {
    +definirPoliticaVersionado(limite: int): void
    +verRegistrosAcceso(): List<String>
    +recibirAlertasSeguridad(): void
  }

  class Rol {
    -id: int
    -nombre: string
    -permisos: List<Permiso>
    +getPermisos(): List<Permiso>
  }

  class Permiso {
    -id: int
    -nombre: string
    -descripcion: string
  }
}

package "Autenticación" {
  class AuthService {
    +login(email: string, password: string): Usuario
    +logout(usuario: Usuario): void
    +generarToken(usuario: Usuario): string
    +verificarToken(token: string): boolean
    +refrescarSesion(usuario: Usuario): string
  }
}

' ======================
' MIDDLE ROW: ARCHIVOS Y CARPETAS
' ======================
package "Archivos" {
  class Archivo {
    -id: int
    -nombre: string
    -tamaño: float
    -tipo: string
    -fechaCreacion: Date
    -fechaModificacion: Date
    -versiones: List<Version>
    -proveedor: ProveedorAlmacenamiento
    +renombrar(nuevoNombre: string): void
    +eliminar(): void
    +getVersiones(): List<Version>
    +getEtiquetas(): List<Etiqueta>
    +previsualizar(): Object
    +descargar(): binary
    +imprimir(): void
  }

  class Version {
    -id: int
    -numero: int
    -contenido: binary
    -fecha: Date
    -autor: Usuario
  }
}

package "Gestión" {
  class GestorArchivos <<Facade>> {
    +subirArchivo(archivo: Archivo, usuario: Usuario, proveedor: ProveedorAlmacenamiento): void
    +eliminarArchivo(archivo: Archivo): void
    +renombrarArchivo(archivo: Archivo, nuevoNombre: string): void
    +restaurarVersion(archivo: Archivo, version: Version): void
    +obtenerArchivo(id: int): Archivo
    +listarArchivos(carpeta: Carpeta): List<Archivo>
    +previsualizarArchivo(archivo: Archivo): Object
    +descargarArchivo(archivo: Archivo): binary
    +buscarArchivos(query: string, carpeta: Carpeta): List<Archivo>
    +imprimirArchivo(archivo: Archivo): void
  }

  class GestorCarpetas <<Facade>> {
    +crearCarpeta(nombre: string, usuario: Usuario): Carpeta
    +eliminarCarpeta(carpeta: Carpeta): void
    +renombrarCarpeta(carpeta: Carpeta, nuevoNombre: string): void
    +moverArchivo(archivo: Archivo, carpetaDestino: Carpeta): void
    +listarCarpetas(usuario: Usuario): List<Carpeta>
  }

  class VersionFactory <<Factory>> {
    +crearVersion(archivo: Archivo, usuario: Usuario): Version
  }
}

package "Carpetas" {
  class Carpeta {
    -id: int
    -nombre: string
    -archivos: List<Archivo>
    -subcarpetas: List<Carpeta>
    +crearSubcarpeta(nombre: string): Carpeta
    +renombrar(nuevoNombre: string): void
    +eliminar(): void
    +listarContenido(): List<Object>
  }
}

' ======================
' LEFT COLUMN: ORGANIZACIÓN
' ======================
package "Organización" {
  class Etiqueta {
    -id: int
    -nombre: string
    +asignarArchivo(archivo: Archivo): void
    +removerArchivo(archivo: Archivo): void
  }

  interface EstrategiaOrdenamiento <<Strategy>> {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenarPorFecha {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenarPorNombre {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenarPorTipo {
    +ordenar(archivos: List<Archivo>): List<Archivo>
  }

  class OrdenadorArchivos {
    -estrategia: EstrategiaOrdenamiento
    +setEstrategia(estrategia: EstrategiaOrdenamiento): void
    +ordenarArchivos(archivos: List<Archivo>): List<Archivo>
  }
}

' ======================
' RIGHT COLUMN: SERVICIOS
' ======================
package "Versionamiento" {
  interface PoliticaVersionado <<Strategy>> {
    +aplicar(versiones: List<Version>): List<Version>
  }

  class PoliticaLimiteFijo implements PoliticaVersionado {
    -limite: int
    +aplicar(versiones: List<Version>): List<Version>
  }
}

package "Permisos" {
  class CompartirService {
    +compartirArchivo(archivo: Archivo, rol: Rol): void
    +revocarAcceso(archivo: Archivo, rol: Rol): void
    +listarUsuariosConAcceso(archivo: Archivo): List<Usuario>
    +compartirCarpeta(carpeta: Carpeta, usuario: Usuario): void
    +revocarAccesoCarpeta(carpeta: Carpeta, usuario: Usuario): void
    +listarUsuariosConAccesoCarpeta(carpeta: Carpeta): List<Usuario>
  }
}

' ======================
' BOTTOM ROW: CLOUD Y PERSISTENCIA
' ======================
package "Almacenamiento en la Nube" {
  abstract class ProveedorAlmacenamiento <<Strategy>> {
    -nombre: string
    -descripcion: string
    +ProveedorAlmacenamiento(nombre: string, descripcion: string)
    +getNombre(): string
    +getDescripcion(): string
    +equals(otro: ProveedorAlmacenamiento): boolean
    +toString(): string
    +{abstract} subirArchivo(archivo: Archivo): void
    +{abstract} descargarArchivo(id: int): binary
    +{abstract} eliminarArchivo(id: int): void
  }

  class ProveedorFactory <<Factory>> {
    +crearProveedor(nombre: string): ProveedorAlmacenamiento
  }

  class OCIStorage {
    -config: OCIConfig
    +OCIStorage(): void
    +subirArchivo(archivo: Archivo): void
    +descargarArchivo(id: int): binary
    +eliminarArchivo(id: int): void
  }

  class AWSStorage {
    -config: AWSConfig
    +AWSStorage(): void
    +subirArchivo(archivo: Archivo): void
    +descargarArchivo(id: int): binary
    +eliminarArchivo(id: int): void
  }

  class GCPStorage {
    -config: GCPConfig
    +GCPStorage(): void
    +subirArchivo(archivo: Archivo): void
    +descargarArchivo(id: int): binary
    +eliminarArchivo(id: int): void
  }
}

package "Persistencia" {
  interface IRepositorioArchivos {
    +guardar(archivo: Archivo): void
    +obtener(id: int): Archivo
    +eliminar(id: int): void
    +listarPorCarpeta(carpeta: Carpeta): List<Archivo>
  }

  interface IRepositorioUsuarios {
    +guardar(usuario: Usuario): void
    +obtener(id: int): Usuario
    +obtenerPorEmail(email: string): Usuario
  }

  class CloudRepositorio implements IRepositorioArchivos {
    -proveedor: ProveedorAlmacenamiento
    +setProveedor(proveedor: ProveedorAlmacenamiento): void
    +guardar(archivo: Archivo): void
    +obtener(id: int): Archivo
    +eliminar(id: int): void
    +listarPorCarpeta(carpeta: Carpeta): List<Archivo>
  }

  class LocalStorageRepositorioUsuarios implements IRepositorioUsuarios {
    +guardar(usuario: Usuario): void
    +obtener(id: int): Usuario
    +obtenerPorEmail(email: string): Usuario
  }
}

' ======================
' RELACIONES PRINCIPALES (ordenadas por proximidad)
' ======================

' Relaciones de Usuario y Rol
Usuario ||--o{ Carpeta : "posee"
Usuario ||--o{ Etiqueta : "crea"
Usuario ||--|| Rol : "tiene"
Rol ||--o{ Permiso : "incluye"

' Relaciones de Carpeta y Archivo
Carpeta ||--o{ Archivo : "contiene"
Carpeta ||--o{ Carpeta : "subcarpetas"

' Relaciones de Archivo
Archivo }o--|| ProveedorAlmacenamiento : "almacenado_en"
Archivo ||--|{ Version : "versiones"
Archivo }o--o{ Etiqueta : "etiquetado"
Version }o--|| Usuario : "autor"

' Relaciones de Servicios (minimizadas visualmente)
Administrador ||--|| PoliticaVersionado
PoliticaVersionado <|.. PoliticaLimiteFijo : "implementa"
AuthService ..> IRepositorioUsuarios : "usa"

' Relaciones Gestores
GestorArchivos ..> VersionFactory : "usa"
GestorArchivos ..> PoliticaVersionado : "aplica"
GestorArchivos ..> IRepositorioArchivos : "persiste"
GestorArchivos ..> ProveedorFactory : "crea_proveedor"

GestorCarpetas ..> Carpeta : "gestiona"

' Relaciones Organización
OrdenadorArchivos o-- EstrategiaOrdenamiento : "estrategia"
OrdenadorArchivos ..> Archivo : "ordena"
EstrategiaOrdenamiento <|.. OrdenarPorFecha : "implementa"
EstrategiaOrdenamiento <|.. OrdenarPorNombre : "implementa"
EstrategiaOrdenamiento <|.. OrdenarPorTipo : "implementa"

' Relaciones Permisos
CompartirService ..> Archivo : "comparte"
CompartirService ..> Carpeta : "comparte"
CompartirService ..> Rol : "asigna"
CompartirService ..> Usuario : "gestiona_acceso"

' Relaciones Cloud
CloudRepositorio o-- ProveedorAlmacenamiento : "proveedor"
ProveedorFactory ..> ProveedorAlmacenamiento : "crea"
ProveedorAlmacenamiento <|-- OCIStorage : "extiende"
ProveedorAlmacenamiento <|-- AWSStorage : "extiende" 
ProveedorAlmacenamiento <|-- GCPStorage : "extiende"

' Servicios adicionales
package "Servicios" {
  class BuscadorService {
    +buscar(query: string, carpeta: Carpeta): List<Archivo>
  }

  class PrintService {
    +imprimir(archivo: Archivo): void
  }
}

' Relaciones con servicios
GestorArchivos ..> BuscadorService : "usa"
GestorArchivos ..> PrintService : "usa"
PrintService ..> Archivo : "imprime"

' Posicionamiento visual (layout hints)
Usuario -[hidden]-> GestorArchivos
Carpeta -[hidden]-> GestorCarpetas
Archivo -[hidden]-> Version

@enduml