@startuml diagrama_sprint1_parte3

title DIAGRAMAS DE COMPONENTES - PARTE 3\nSprint 1 - Sistema UlStorage\nHistorias: SCRUM-17, SCRUM-18, SCRUM-28, SCRUM-29

skinparam componentStyle rectangle
skinparam component {
    BackgroundColor #E8F4FD
    BorderColor #2E86AB
    ArrowColor #A23B72
}

skinparam interface {
    BackgroundColor #FFF3CD
    BorderColor #856404
}

skinparam database {
    BackgroundColor #D1ECF1
    BorderColor #0C5460
}

' ===============================
' SCRUM-17: CREAR CARPETAS
' ===============================
package "SCRUM-17: Crear Carpetas" as scrum17 {
    
    ' Frontend Components
    package "Frontend" as scrum17_frontend {
        component [Botón Crear Carpeta] as create_btn
        component [Modal Nombre Carpeta] as name_modal
        component [Validador Carpeta] as folder_validator_fe
    }
    
    ' Backend Components
    package "Backend" as scrum17_backend {
        component [Controlador Carpeta] as folder_ctrl_create
        component [Validador Nombre] as name_validator
        component [Servicio Carpeta] as folder_svc
        component [Verificador Duplicados] as duplicate_checker
    }
    
    ' Storage Layer Multi-Cloud
    package "Storage" as scrum17_storage {
        component [Fábrica Almacenamiento] as storage_fact_folder
        component [Repositorio OCI] as oci_repo_folder
        component [Repositorio AWS] as aws_repo_folder
        component [Repositorio Azure] as azure_repo_folder
        component [Repositorio GCP] as gcp_repo_folder
    }
    
    ' Data Layer
    package "Data" as scrum17_data {
        component [Repositorio Carpeta] as folder_repo_create
        database "PostgreSQL" as db_folder
    }
    
    ' Flujo de creación de carpeta
    create_btn --> name_modal
    name_modal --> folder_validator_fe
    folder_validator_fe --> folder_ctrl_create
    folder_ctrl_create --> name_validator
    name_validator --> duplicate_checker
    duplicate_checker --> folder_svc
    
    folder_svc --> storage_fact_folder
    storage_fact_folder --> oci_repo_folder
    storage_fact_folder --> aws_repo_folder
    storage_fact_folder --> azure_repo_folder
    storage_fact_folder --> gcp_repo_folder
    
    folder_svc --> folder_repo_create
    folder_repo_create --> db_folder
}

note right of scrum17 : **Criterio de Aceptación:**\nCrear carpetas con nombres válidos,\nvalidación de duplicados

' ===============================
' SCRUM-18: ORDENAR ARCHIVOS
' ===============================
package "SCRUM-18: Ordenar Archivos" as scrum18 {
    
    ' Frontend Components
    package "Frontend" as scrum18_frontend {
        component [Controles Ordenar] as sort_controls
        component [Encabezado Tabla] as table_header
        component [Cambiador Vista] as view_switcher
        component [Panel Filtro] as filter_panel
        component [Persistencia Orden] as sort_persistence
    }
    
    ' Backend Components
    package "Backend" as scrum18_backend {
        component [Controlador Orden] as sort_ctrl
        component [Constructor Consulta] as query_builder
        component [Servicio Ordenar] as sort_svc
        component [Servicio Archivo] as file_svc_sort
    }
    
    ' Data Layer
    package "Data" as scrum18_data {
        component [Repositorio Archivo] as file_repo_sort
        component [Repositorio Búsqueda] as search_repo
        database "PostgreSQL" as db_sort
    }
    
    ' Flujo de ordenamiento
    sort_controls --> table_header
    table_header --> sort_ctrl
    view_switcher --> sort_ctrl
    filter_panel --> sort_ctrl
    
    sort_ctrl --> query_builder
    query_builder --> sort_svc
    sort_svc --> file_svc_sort
    
    file_svc_sort --> file_repo_sort
    file_svc_sort --> search_repo
    file_repo_sort --> db_sort
    search_repo --> db_sort
    
    sort_ctrl --> sort_persistence
}

note right of scrum18 : **Criterio de Aceptación:**\nOrdenar por nombre, fecha, tamaño, tipo.\nFiltros persistentes durante sesión

' ===============================
' SCRUM-28: BÚSQUEDA DE ARCHIVOS
' ===============================
package "SCRUM-28: Búsqueda de Archivos" as scrum28 {
    
    ' Frontend Components
    package "Frontend" as scrum28_frontend {
        component [Componente Búsqueda] as search_comp
        component [Campo Búsqueda] as search_input
        component [Controles Filtro] as filter_controls
        component [Lista Resultados] as results_list
        component [Búsqueda Tiempo Real] as realtime_search
    }
    
    ' Backend Components
    package "Backend" as scrum28_backend {
        component [Controlador Búsqueda] as search_ctrl
        component [Servicio Búsqueda] as search_svc
        component [Servicio Indexación] as indexing_svc
        component [Optimizador Consulta] as query_optimizer
    }
    
    ' Data Layer
    package "Data" as scrum28_data {
        component [Repositorio Búsqueda] as search_repo_main
        component [Repositorio Índice] as index_repo
        database "PostgreSQL" as db_search
    }
    
    ' Flujo de búsqueda
    search_comp --> search_input
    search_input --> realtime_search
    search_comp --> filter_controls
    filter_controls --> search_ctrl
    realtime_search --> search_ctrl
    
    search_ctrl --> search_svc
    search_svc --> query_optimizer
    query_optimizer --> indexing_svc
    
    search_svc --> search_repo_main
    indexing_svc --> index_repo
    search_repo_main --> db_search
    index_repo --> db_search
    
    search_svc --> results_list
}

note right of scrum28 : **Criterio de Aceptación:**\nBúsqueda por nombre y tipo de archivo,\nresultados en tiempo real

' ===============================
' SCRUM-29: IMPRIMIR ARCHIVOS
' ===============================
package "SCRUM-29: Imprimir Archivos" as scrum29 {
    
    ' Frontend Components
    package "Frontend" as scrum29_frontend {
        component [Botón Imprimir] as print_btn
        component [Diálogo Imprimir] as print_dialog
        component [Vista Previa Impresión] as print_preview
        component [Configuración Impresión] as print_settings
    }
    
    ' Backend Components
    package "Backend" as scrum29_backend {
        component [Controlador Impresión] as print_ctrl
        component [Servicio Impresión] as print_svc
        component [Convertidor Formato] as format_converter
        component [Generador Imprimible] as printable_gen
    }
    
    ' Browser API
    package "Browser" as scrum29_browser {
        component [API Impresión Navegador] as browser_print
        component [Renderizador Documento] as doc_renderer
    }
    
    ' Flujo de impresión
    print_btn --> print_dialog
    print_dialog --> print_settings
    print_settings --> print_preview
    print_preview --> print_ctrl
    
    print_ctrl --> print_svc
    print_svc --> format_converter
    format_converter --> printable_gen
    
    printable_gen --> doc_renderer
    doc_renderer --> browser_print
}

note right of scrum29 : **Criterio de Aceptación:**\nImprimir desde vista previa,\nsoporte para PDF e imágenes

' ===============================
' RELACIONES ENTRE HISTORIAS
' ===============================
scrum17 .down.> scrum18 : "Carpetas para ordenar"
scrum18 .down.> scrum28 : "Estructura para búsqueda"

' ===============================
' RESUMEN ARQUITECTÓNICO
' ===============================
package "Resumen Arquitectónico Sprint 1" as architecture_summary {
    
    component [Autenticación Simple] as simple_auth
    component [Gestión Archivos Multi-Cloud] as multicloud_files  
    component [Navegación y Búsqueda] as navigation_search
    component [Operaciones CRUD Básicas] as crud_operations
    
    simple_auth --> multicloud_files
    multicloud_files --> navigation_search
    navigation_search --> crud_operations
}

note right of architecture_summary : **Características Sprint 1:**\n• Sin roles ni permisos complejos\n• Autenticación básica email/password\n• Soporte 4 proveedores cloud\n• Factory pattern para extensibilidad\n• Repository pattern para datos

' ===============================
' LEYENDA FINAL
' ===============================
legend bottom left
|= Principio SOLID |= Aplicación en Sprint 1 |
| SRP | Cada componente una responsabilidad |
| OCP | Extensible para nuevos proveedores cloud |
| LSP | Repositorios intercambiables |
| ISP | Interfaces específicas por funcionalidad |
| DIP | Dependencias hacia abstracciones |

**Patrones de Diseño Implementados:**
• Factory: Creación de proveedores de almacenamiento
• Repository: Acceso uniforme a datos
• Strategy: Validadores específicos por tipo
• Observer: Notificaciones de progreso
• Facade: Simplificación de APIs complejas

**Sprint 1 - Enfoque:** Funcionalidad básica sin complejidad innecesaria
endlegend

@enduml